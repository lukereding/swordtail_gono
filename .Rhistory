),
claw = fct_recode(`Claw presence vs absence`,
"present" = "1",
"absent" = "0"
)) %>%
ggplot(aes(precop, n, fill = claw)) +
geom_bar(stat = "identity",position = "fill") +
scale_fill_blues(name = "gonopodial\nclaw") +
scale_y_continuous(labels = scales::percent_format())  +
labs(x = "", y = "") +
annotate("text", x = c(1,2,2), y = c(0.05,0.05, 0.8), label  = paste0("n = ", c(5,10,3)), color = "white", size= 5) +
annotate("text", x = 1.5, y = 1.05, label  =  paste("p = 0.008"), color = "black", size= 5) +
theme(axis.text.x = element_blank(), axis.ticks.x = element_blank())
df %>%
group_by(`Well-developed precopulatory behavior`, `Well-formedhookonray5aofthegonopodium`) %>%
count %>%
filter(`Well-developed precopulatory behavior` != "NA") %>%
ggplot(aes(factor(`Well-developed precopulatory behavior`), n, fill = factor(`Well-formedhookonray5aofthegonopodium`))) +
geom_bar(stat = "identity",position = "fill") +
scale_fill_blues() +
scale_y_continuous(labels = scales::percent_format())
# make it prettier
require(forcats)
require(magrittr)
x <- df %>%
group_by(`Well-developed precopulatory behavior`, `Well-formedhookonray5aofthegonopodium`) %>%
count
x$`Well-developed precopulatory behavior` %<>% factor
x$`Well-formedhookonray5aofthegonopodium` %<>% factor
(fig2 <- x %>%
mutate(precop = fct_recode(`Well-developed precopulatory behavior`,
"yes" = "1",
"no" = "0"
),
hook = fct_recode(`Well-formedhookonray5aofthegonopodium`,
"present" = "1",
"absent" = "0",
"present" = "2"
)) %>%
filter(precop != "NA") %>%
ggplot(aes(precop, n, fill =hook)) +
geom_bar(stat = "identity",position = "fill") +
scale_fill_blues(name = "hook on ray 5a\nof gonopodium") +
scale_y_continuous(labels = scales::percent_format()) +
labs(x = "well-developed precopulatory behavior?", y = "")+
annotate("text", x = c(1,2,2), y = c(0.05,0.05, 0.75), label  = paste0("n = ", c(5,9,4)), color = "white", size= 5) +
annotate("text", x = 1.5, y = 1.05, label  =  paste("p = 0.035"), color = "black", size= 5) )
(fig2 <- x %>%
mutate(precop = fct_recode(`Well-developed precopulatory behavior`,
"yes" = "1",
"no" = "0"
),
hook = fct_recode(`Well-formedhookonray5aofthegonopodium`,
"present" = "1",
"absent" = "0",
"present" = "2"
)) %>%
filter(precop != "NA") %>%
ggplot(aes(precop, n, fill =hook)) +
geom_bar(stat = "identity",position = "fill") +
scale_fill_blues(name = "hook on ray 5a\nof gonopodium") +
scale_y_continuous(labels = scales::percent_format()) +
labs(x = "well-developed precopulatory behavior?", y = "")+
annotate("text", x = c(1,2,2), y = c(0.05,0.05, 0.75), label  = paste0("n = ", c(5,9,4)), color = "white", size= 5) +
annotate("text", x = 1.5, y = 1.05, label  =  paste("p = 0.035"), color = "black", size= 5) +theme_mod())
fig1 <- x %>%
mutate(precop = fct_recode(`Well-developed precopulatory behavior`,
"yes" = "1",
"no" = "0"
),
claw = fct_recode(`Claw presence vs absence`,
"present" = "1",
"absent" = "0"
)) %>%
ggplot(aes(precop, n, fill = claw)) +
geom_bar(stat = "identity",position = "fill") +
scale_fill_blues(name = "gonopodial\nclaw") +
scale_y_continuous(labels = scales::percent_format())  +
labs(x = "", y = "") +
annotate("text", x = c(1,2,2), y = c(0.05,0.05, 0.8), label  = paste0("n = ", c(5,10,3)), color = "white", size= 5) +
annotate("text", x = 1.5, y = 1.05, label  =  paste("p = 0.008"), color = "black", size= 5) +
theme(axis.text.x = element_blank(), axis.ticks.x = element_blank() + theme_mod())
x <- df %>%
group_by(`Well-developed precopulatory behavior`, `Claw presence vs absence`) %>%
tally %>%
filter(!is.na(`Well-developed precopulatory behavior`))
# recode the factors
require(forcats)
require(magrittr)
x$`Well-developed precopulatory behavior` %<>% factor
x$`Claw presence vs absence` %<>% factor
# create data frame to use for adding sample sizes
lab <- data.frame(precop = 1:2, n = c(0.6, 0.6), sample_size = c(5, 13))
# chisq.test(matrix(c(5,0,3,10)))
fig1 <- x %>%
mutate(precop = fct_recode(`Well-developed precopulatory behavior`,
"yes" = "1",
"no" = "0"
),
claw = fct_recode(`Claw presence vs absence`,
"present" = "1",
"absent" = "0"
)) %>%
ggplot(aes(precop, n, fill = claw)) +
geom_bar(stat = "identity",position = "fill") +
scale_fill_blues(name = "gonopodial\nclaw") +
scale_y_continuous(labels = scales::percent_format())  +
labs(x = "", y = "") +
annotate("text", x = c(1,2,2), y = c(0.05,0.05, 0.8), label  = paste0("n = ", c(5,10,3)), color = "white", size= 5) +
annotate("text", x = 1.5, y = 1.05, label  =  paste("p = 0.008"), color = "black", size= 5) +
theme(axis.text.x = element_blank(), axis.ticks.x = element_blank() + theme_mod())
fig1
(fig1 <- x %>%
mutate(precop = fct_recode(`Well-developed precopulatory behavior`,
"yes" = "1",
"no" = "0"
),
claw = fct_recode(`Claw presence vs absence`,
"present" = "1",
"absent" = "0"
)) %>%
ggplot(aes(precop, n, fill = claw)) +
geom_bar(stat = "identity",position = "fill") +
scale_fill_blues(name = "gonopodial\nclaw") +
scale_y_continuous(labels = scales::percent_format())  +
labs(x = "", y = "") +
annotate("text", x = c(1,2,2), y = c(0.05,0.05, 0.8), label  = paste0("n = ", c(5,10,3)), color = "white", size= 5) +
annotate("text", x = 1.5, y = 1.05, label  =  paste("p = 0.008"), color = "black", size= 5) +
theme(axis.text.x = element_blank(), axis.ticks.x = element_blank()) +
theme_mod())
(fig1 <- x %>%
mutate(precop = fct_recode(`Well-developed precopulatory behavior`,
"yes" = "1",
"no" = "0"
),
claw = fct_recode(`Claw presence vs absence`,
"present" = "1",
"absent" = "0"
)) %>%
ggplot(aes(precop, n, fill = claw)) +
geom_bar(stat = "identity",position = "fill") +
scale_fill_blues(name = "gonopodial\nclaw") +
scale_y_continuous(labels = scales::percent_format())  +
labs(x = "", y = "") +
annotate("text", x = c(1,2,2), y = c(0.05,0.05, 0.8), label  = paste0("n = ", c(5,10,3)), color = "white", size= 5) +
annotate("text", x = 1.5, y = 1.05, label  =  paste("p = 0.008"), color = "black", size= 5) +
theme_mod() +
theme(axis.text.x = element_blank(), axis.ticks.x = element_blank()) )
df %>%
group_by(`Well-developed precopulatory behavior`, `Well-formedhookonray5aofthegonopodium`) %>%
count %>%
filter(`Well-developed precopulatory behavior` != "NA") %>%
ggplot(aes(factor(`Well-developed precopulatory behavior`), n, fill = factor(`Well-formedhookonray5aofthegonopodium`))) +
geom_bar(stat = "identity",position = "fill") +
scale_fill_blues() +
scale_y_continuous(labels = scales::percent_format())
# make it prettier
require(forcats)
require(magrittr)
x <- df %>%
group_by(`Well-developed precopulatory behavior`, `Well-formedhookonray5aofthegonopodium`) %>%
count
x$`Well-developed precopulatory behavior` %<>% factor
x$`Well-formedhookonray5aofthegonopodium` %<>% factor
(fig2 <- x %>%
mutate(precop = fct_recode(`Well-developed precopulatory behavior`,
"yes" = "1",
"no" = "0"
),
hook = fct_recode(`Well-formedhookonray5aofthegonopodium`,
"present" = "1",
"absent" = "0",
"present" = "2"
)) %>%
filter(precop != "NA") %>%
ggplot(aes(precop, n, fill =hook)) +
geom_bar(stat = "identity",position = "fill") +
scale_fill_blues(name = "hook on ray 5a\nof gonopodium") +
scale_y_continuous(labels = scales::percent_format()) +
labs(x = "well-developed precopulatory behavior?", y = "")+
annotate("text", x = c(1,2,2), y = c(0.05,0.05, 0.75), label  = paste0("n = ", c(5,9,4)), color = "white", size= 5) +
annotate("text", x = 1.5, y = 1.05, label  =  paste("p = 0.035"), color = "black", size= 5) +theme_mod())
plot_grid(fig1 + theme_mod(), fig2, labels = c("a", "b"), nrow = 2)
(fig2 <- x %>%
mutate(precop = fct_recode(`Well-developed precopulatory behavior`,
"yes" = "1",
"no" = "0"
),
hook = fct_recode(`Well-formedhookonray5aofthegonopodium`,
"present" = "1",
"absent" = "0",
"present" = "2"
)) %>%
filter(precop != "NA") %>%
ggplot(aes(precop, n, fill =hook)) +
geom_bar(stat = "identity",position = "fill") +
scale_fill_blues(name = "hook on\nray 5nof\ngonopodium") +
scale_y_continuous(labels = scales::percent_format()) +
labs(x = "well-developed precopulatory behavior?", y = "")+
annotate("text", x = c(1,2,2), y = c(0.05,0.05, 0.75), label  = paste0("n = ", c(5,9,4)), color = "white", size= 5) +
annotate("text", x = 1.5, y = 1.05, label  =  paste("p = 0.035"), color = "black", size= 5) +theme_mod())
plot_grid(fig1 + theme_mod(), fig2, labels = c("a", "b"), nrow = 2)
ggsave("~/Desktop/figures_for_molly/final_figures/swordtail_gono_court.pdf", height = 6, width = 4)
system("open ~/Desktop/figures_for_molly/final_figures/swordtail_gono_court.pdf")
ggsave("~/Desktop/figures_for_molly/final_figures/swordtail_gono_court.pdf", height = 7, width = 4)
system("open ~/Desktop/figures_for_molly/final_figures/swordtail_gono_court.pdf")
(fig2 <- x %>%
mutate(precop = fct_recode(`Well-developed precopulatory behavior`,
"yes" = "1",
"no" = "0"
),
hook = fct_recode(`Well-formedhookonray5aofthegonopodium`,
"present" = "1",
"absent" = "0",
"present" = "2"
)) %>%
filter(precop != "NA") %>%
ggplot(aes(precop, n, fill =hook)) +
geom_bar(stat = "identity",position = "fill") +
scale_fill_blues(name = "hook on\nray 5\nof\ngonopodium") +
scale_y_continuous(labels = scales::percent_format()) +
labs(x = "well-developed precopulatory behavior?", y = "")+
annotate("text", x = c(1,2,2), y = c(0.05,0.05, 0.75), label  = paste0("n = ", c(5,9,4)), color = "white", size= 5) +
annotate("text", x = 1.5, y = 1.05, label  =  paste("p = 0.035"), color = "black", size= 5) +theme_mod())
plot_grid(fig1 + theme_mod(), fig2, labels = c("a", "b"), nrow = 2)
(fig2 <- x %>%
mutate(precop = fct_recode(`Well-developed precopulatory behavior`,
"yes" = "1",
"no" = "0"
),
hook = fct_recode(`Well-formedhookonray5aofthegonopodium`,
"present" = "1",
"absent" = "0",
"present" = "2"
)) %>%
filter(precop != "NA") %>%
ggplot(aes(precop, n, fill =hook)) +
geom_bar(stat = "identity",position = "fill") +
scale_fill_blues(name = "hook on\nray 5 of\ngonopodium") +
scale_y_continuous(labels = scales::percent_format()) +
labs(x = "well-developed precopulatory behavior?", y = "")+
annotate("text", x = c(1,2,2), y = c(0.05,0.05, 0.75), label  = paste0("n = ", c(5,9,4)), color = "white", size= 5) +
annotate("text", x = 1.5, y = 1.05, label  =  paste("p = 0.035"), color = "black", size= 5) +theme_mod())
plot_grid(fig1 + theme_mod(), fig2, labels = c("a", "b"), nrow = 2)
ggsave("~/Desktop/figures_for_molly/final_figures/swordtail_gono_court.pdf", height = 7, width = 4)
system("open ~/Desktop/figures_for_molly/final_figures/swordtail_gono_court.pdf")
library(apel)
library(ape)
library(ggrepel)
install.packages("ggtree")
source("https://bioconductor.org/biocLite.R")
biocLite("ggtree")
require(ggtree)
file <- system.file("~/Desktop/swordtail_gono", "test", package="ggtree")
beast <- read.tree(file)
beast <- read.tree(file)
read.dna(file)
geotree <- read.nexus("test")
geotree <- read.nexus(file = "test")
geotree <- read.nexus(file = "test")
library(dplyr)
library(viridis)
library(cowplot)
library(ggplot2)
library(magrittr)
require(alluvial)
require(dplyr)
require(wesanderson)
require(ggthemes)
require(RColorBrewer)
require(tidyverse)
# other three-color combinations:
option1 <- c("#FECC5C" ,"#FD8D3C", "#E31A1C")
option2 <- c("#A1DAB4" ,"#41B6C4", "#225EA8")
define_colors <- function(){
g <- c(0.8423298817793848, 0.8737404427964184, 0.7524954030731037,
0.7161563289278935, 0.8232880086631527, 0.6542005475652726,
0.5815252468131623, 0.7703468311289211, 0.5923205247665932,
0.4576142801317438, 0.7057950454122253, 0.5634791991994519,
0.35935359003014994, 0.6245622005326175, 0.554154071059354,
0.2958858732022419, 0.532095403269888, 0.5458447574597934,
0.25744332683867743, 0.42368146872794976, 0.5191691971789514,
0.23607359470828057, 0.3125354171874312, 0.4605854787435648,
0.21392162678343224, 0.20848424698401846, 0.3660805512579508,
0.17250549177124488, 0.11951843162770594, 0.24320155229883056)
greens <- c()
for(i in seq(1, length(g), by = 3)){
greens %<>% c(rgb(g[i], g[1+i], g[2+i]))
}
greens <- colorRampPalette(greens)
# purples
p <- c(0.9537199587873054, 0.8839852653958624, 0.8572137883283991,
0.903348395924016, 0.7454993373667652, 0.7391619965768441,
0.8399541228445281, 0.6129917738874731, 0.6602115774420979,
0.7513505093364804, 0.48945565575763195, 0.6018942098123031,
0.6294330293285846, 0.3759488961295364, 0.5449881320264003,
0.4874367518814018, 0.2815561055972257, 0.4759723295956624,
0.326803151203735, 0.1959385410144846, 0.3750675408906117,
0.1750865648952205, 0.11840023306916837, 0.24215989137836502)
purples <- c()
for(i in seq(1, length(p), by = 3)){
purples %<>% c(rgb(p[i], p[1+i], p[2+i]))
}
purples <- colorRampPalette(purples)
# diverging
di <- c("#0072B2", "#009E73", "#D55E00", "#F0E442", "#65B4E9","#CC79A7")
diverging2 <- function(n){
return(rep(di,10)[1:n])
}
# diverging (again)
d <- c(0.8534948800506427, 0.8311579968120906, 0.9504434194723484,
0.7161547649737644, 0.7772328177992646, 0.9012295416970726,
0.5698416187488679, 0.7372776495249135, 0.8015571299411568,
0.4475877143602596, 0.6941314247086136, 0.6533842228720514,
0.37156526076982915, 0.6319466274376195, 0.4812418293673223,
0.34411400647627366, 0.5482043479768488, 0.3279101668866002,
0.34453475868063327, 0.4375836946416381, 0.20707966008312784,
0.3443012775517048, 0.3171230296935843, 0.14081198014889498,
0.31301696963683884, 0.20428342129547264, 0.11835175039625845,
0.23488122950011542, 0.11284523438144338, 0.10887833284321738)
div <- c()
for(i in seq(1, length(d), by = 3)){
div %<>% c(rgb(d[i], d[1+i], d[2+i]))
}
diverging <- function(n){
if(n > 10){
warning("consider not using this color palette with more than 10 colors")
}
if(n > 10){
x <- div[floor(seq(from = 1, to = 10, length.out = n))]
x %<>% rep(20)
return(x[1:n])
} else{
return(div[floor(seq(from = 1, to = 10, length.out = n))])
}
}
# a different green / blue
b <- c(0.21697808798621682, 0.32733564601225013, 0.36941176807179171,
0.23442778952760632, 0.45820839330261826, 0.54352941859002213,
0.25140587751382315, 0.58554403931486831, 0.7129411866618138,
0.32480841754308709, 0.68493145540648814, 0.7899474686267329,
0.45066770474895151, 0.75099834881576832, 0.77038576275694604,
0.58002308326608998, 0.81890043370863974, 0.75028067616855398)
gb <- c()
for(i in seq(1, length(b), by = 3)){
gb %<>% c(rgb(b[i], b[1+i], b[2+i]))
}
gb <- colorRampPalette(gb)
return(c(greens, purples, diverging2, diverging, gb))
}
x <- define_colors()
greens <- x[[1]]; purples <- x[[2]]; diverging2 <- x[[3]]; diverging <- x[[4]]; gb <- x[[5]]
greens3 <- greens(4)[2:4]
theme_new <- function(font_size = 16, font_family = "", line_size = .5, rotate_labels = F) {
half_line <- 9
small_rel <- 0.8
small_size <- small_rel * font_size
theme_grey(base_size = font_size, base_family = font_family) %+replace%
theme(
rect              = element_rect(fill = "transparent", colour = NA, color = NA, size = 0, linetype = 0),
text              = element_text(family = font_family, face = "plain", colour = "black",
size = font_size, hjust = 0.5, vjust = 0.5, angle = 0, lineheight = .9,
margin = ggplot2::margin(), debug = FALSE),
axis.text         = element_text(colour = "black", size = small_size),
#axis.title        = element_text(face = "bold"),
axis.text.x       = element_text(margin = ggplot2::margin(t = small_size / 4), vjust = 1),
axis.text.y       = element_text(margin = ggplot2::margin(r = small_size / 4), hjust = 1),
axis.title.x      = element_text(
margin = ggplot2::margin(t = small_size / 2, b = small_size / 4)
),
axis.title.y      = element_text(
angle = 90,
margin = ggplot2::margin(r = small_size / 2, l = small_size / 4),
),
axis.ticks        = element_line(colour = "black", size = line_size),
axis.line.x       = element_line(colour = "black", size = line_size),
axis.line.y       = element_line(colour = "black", size = line_size),
legend.key        = element_blank(),
legend.margin     = grid::unit(0.1, "cm"),
legend.key.size   = grid::unit(1, "lines"),
legend.text       = element_text(size = rel(small_rel)),
#    legend.position   = c(-0.03, 1.05),
# legend.justification = c("left", "right"),
panel.background  = element_blank(),
panel.border      = element_blank(),
panel.grid.major  = element_blank(),
panel.grid.minor  = element_blank(),
strip.text        = element_text(size = rel(small_rel)),
strip.background  = element_blank(),
plot.background   = element_blank(),
plot.title        = element_text(face = "bold",
size = font_size,
margin = ggplot2::margin(b = half_line))
)
}
theme_mod <- function(font_size = 16, font_family = "", line_size = .5) {
half_line <- 9
small_rel <- 0.8
small_size <- small_rel * font_size
theme_tufte(base_size = font_size, base_family = font_family) %+replace%
theme(
rect              = element_rect(fill = "transparent", colour = NA, color = NA, size = 0, linetype = 0),
text              = element_text(family = font_family, face = "plain", colour = "black",
size = font_size, hjust = 0.5, vjust = 0.5, angle = 0, lineheight = .9,
margin = ggplot2::margin(), debug = FALSE),
axis.text         = element_text(colour = "black", size = small_size),
#axis.title        = element_text(face = "bold"),
axis.text.x       = element_text(margin = ggplot2::margin(t = small_size / 4), vjust = 1),
axis.text.y       = element_text(margin = ggplot2::margin(r = small_size / 4), hjust = 1),
axis.title.x      = element_text(
margin = ggplot2::margin(t = small_size / 2, b = small_size / 4)
),
axis.title.y      = element_text(
angle = 90,
margin = ggplot2::margin(r = small_size / 2, l = small_size / 4),
),
axis.ticks        = element_line(colour = "black", size = line_size),
axis.line.x       = element_blank(),
axis.line.y       = element_blank(),
legend.key        = element_blank(),
legend.spacing     = grid::unit(0.1, "cm"),
legend.key.size   = grid::unit(1, "lines"),
legend.text       = element_text(size = rel(small_rel*0.7)),
legend.title      = element_text(size=rel(small_rel*0.7)),
#    legend.position   = c(-0.03, 1.05),
# legend.justification = c("left", "right"),
panel.background  = element_blank(),
panel.border      = element_blank(),
panel.grid.major  = element_blank(),
panel.grid.minor  = element_blank(),
strip.text        = element_text(size = rel(small_rel)),
strip.background  = element_rect(fill="#00000020"),
plot.background   = element_blank(),
plot.title        = element_text(hjust = 0,
size = font_size,
margin = ggplot2::margin(b = half_line))
)
}
theme_blank <- theme_bw()
theme_blank$line <- element_blank()
theme_blank$rect <- element_blank()
theme_blank$strip.text <- element_blank()
theme_blank$axis.text <- element_blank()
theme_blank$plot.title <- element_blank()
theme_blank$axis.title <- element_blank()
theme_blank$plot.margin <- structure(c(0, 0, -1, -1), unit = "lines", valid.unit = 3L, class = "unit")
# define some good divergering colors palettes:
diverging_bg <- colorRampPalette(c(rgb(153/255, 93/255,18/255), "white", rgb(12/255,112/255,104/255)))(200)
diverging_rb <- colorRampPalette(c(rgb(41/255, 113/255,177/255), "white", rgb(185/255,39/255,50/255)))(200)
permutation.t.test <- function(x, y, n = 9999, null = 0){
if(typeof(x) == "list"){
x <- unlist(x)
}
if(typeof(y) == "list"){
y <- unlist(y)
}
print(paste0("group 1 has ", length(x), " observations"))
print(paste0("group 2 has ", length(y), " observations"))
crit = mean(x)-mean(y)
diff<-abs(crit-null)
print(paste0("mean of group 1: ", mean(x)))
print(paste0("mean of group 1: ", mean(y)))
print(paste0("true difference: ",diff))
sample_size <- length(x) + length(y)
diffs <- vector(length = n)
for(i in seq_len(n)){
temp <- sample(c(x,y), replace=FALSE)
x_temp <- temp[1:length(x)]
y_temp <- temp[(length(x)+1):sample_size]
diffs[i] <- mean(x_temp) - mean(y_temp)
}
# show what's expected under the null
diffs_null <- diffs - mean(diffs)
par(lwd = 3,family = 'Helvetica',cex.lab=1.3,cex.lab=1.3)
(plot<-hist(diffs_null,cex.lab=1.3,xlab="simulated differences",main="null distribution",col="grey30", border = "grey30",breaks=20))
if(crit > null){
text(crit,max(plot$counts),paste("observed = ",round(crit,3)),pos=1)
} else{
text(crit,max(plot$counts),paste("observed = ",round(crit,3)),pos=4)
}
segments(crit,0,crit,n,lty=1, col="red")
segments(quantile(diffs_null,probs=c(0.025,0.975))[1],0,quantile(diffs_null,probs=c(0.025,0.975))[1],n,lty=3,lwd=2)
segments(quantile(diffs_null,probs=c(0.025,0.975))[2],0,quantile(diffs_null,probs=c(0.025,0.975))[2],n,lty=3,lwd=2)
p <- ((length(diffs[diffs<=null-diff])+length(diffs[diffs>=null+diff]))+1)/(n+1)
print(paste("based on ",n," iterations"))
print(paste0("p-value: ",round(p,4)))
}
give.n <- function(x){
return(c(y = min(x) * 0.85, label = length(x)))
}
give.average <- function(x){
return(c(y = median(x), label = round(mean(x),2)))
}
library(png)
library(grid)
two <- readPNG("~/Desktop/slime_mold/experiments/choice_overload/plots/2.png")
two <- rasterGrob(two, interpolate=TRUE)
three <- readPNG("~/Desktop/slime_mold/experiments/choice_overload/plots/3.png")
three <- rasterGrob(three, interpolate=TRUE)
four <- readPNG("~/Desktop/slime_mold/experiments/choice_overload/plots/4.png")
four <- rasterGrob(four, interpolate=TRUE)
df <- read.csv("/Users/lukereding/Desktop/slime_mold/experiments/choice_overload/choice_overload.csv")
head(df)
df$number_options %<>% factor
df %<>% filter(video != "video_f")
df %<>% mutate(explored = ifelse(number_options_explored > 1, TRUE, FALSE))
df %<>% .[complete.cases(.),]
df
df %>% group_by(video, number_options)
df %>% group_by(video, number_options) %>% count
df %>% group_by(video, number_options) %>% summarise(avg = mean(time))
df %>% group_by(video, number_options) %>% summarise(avg = sd(time))
